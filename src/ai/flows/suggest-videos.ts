// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A flow to suggest immersive videos based on user preferences.
 *
 * - suggestVideos - A function that suggests videos based on user preferences.
 * - SuggestVideosInput - The input type for the suggestVideos function.
 * - SuggestVideosOutput - The return type for the suggestVideos function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestVideosInputSchema = z.object({
  viewingHistory: z
    .string()
    .describe('The user viewing history, as a comma-separated list of video titles.'),
  preferences: z
    .string()
    .describe('The user preferences, as a comma-separated list of genres, themes, or keywords.'),
  numberOfSuggestions: z.number().describe('The number of video suggestions to return.').default(5),
});
export type SuggestVideosInput = z.infer<typeof SuggestVideosInputSchema>;

const SuggestVideosOutputSchema = z.object({
  suggestions: z
    .array(z.string())
    .describe('An array of suggested video titles based on the user viewing history and preferences.'),
});
export type SuggestVideosOutput = z.infer<typeof SuggestVideosOutputSchema>;

export async function suggestVideos(input: SuggestVideosInput): Promise<SuggestVideosOutput> {
  return suggestVideosFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestVideosPrompt',
  input: {schema: SuggestVideosInputSchema},
  output: {schema: SuggestVideosOutputSchema},
  prompt: `You are an AI video recommendation expert.

  Based on the user's viewing history and preferences, you will suggest a list of immersive videos.
  Return ONLY the list of video titles. DO NOT include any additional text or explanation.

  The number of suggestions should match the number requested.

  Viewing History: {{{viewingHistory}}}
  Preferences: {{{preferences}}}
  Number of Suggestions: {{{numberOfSuggestions}}}
  `,
});

const suggestVideosFlow = ai.defineFlow(
  {
    name: 'suggestVideosFlow',
    inputSchema: SuggestVideosInputSchema,
    outputSchema: SuggestVideosOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
